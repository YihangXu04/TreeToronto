#| label: tbl-modelresults
#| tbl-cap: "Explanatory models of flight time based on wing width and wing length"
#| warning: false
# Load necessary libraries
library(dplyr)
# Sample 10% of the data (adjust the percentage if needed)
set.seed(123)  # Set seed for reproducibility
sampled_data <- data %>% sample_frac(0.1)
# Check the structure of the sampled data
str(sampled_data)
# Save the sampled data if needed
write.csv(sampled_data, "sampled_data.csv", row.names = FALSE)
# Proceed with the plots using the sampled data
# Enhanced Plot: Distribution of Tree Diameters
ggplot(sampled_data, aes(x = DBH_TRUNK)) +
geom_histogram(binwidth = 5, aes(fill = ..count..), color = "white", alpha = 0.9) +
scale_fill_gradient(low = "#FFDBDB", high = "#FF6B6B") +  # Soft red gradient
labs(title = "Distribution of Tree Diameters",
x = "Tree Diameter (DBH_TRUNK)",
y = "Tree Count") +
theme_minimal(base_size = 15) +
theme(plot.title = element_text(hjust = 0.5, face = "bold"),
axis.title.x = element_text(size = 13, face = "bold"),
axis.title.y = element_text(size = 13, face = "bold"),
panel.grid.minor = element_blank())
#| eval: true
#| echo: false
#| message: false
#| warning: false
#| label: fig-ppcheckandposteriorvsprior
#| layout-ncol: 2
#| fig-cap: "Examining how the model fits, and is affected by, the data"
#| fig-subcap: ["Posterior prediction check", "Comparing the posterior with the prior"]
## Diagnostics
@fig-stanareyouokay-1 is a trace plot. It shows... This suggests...
#| include: false
#| warning: false
#| message: false
library(tidyverse)
library(palmerpenguins)
library(opendatatoronto)
library(tidyverse)
#| label: fig-bills
#| fig-cap: Bills of penguins
#| echo: false
ggplot(penguins, aes(x = island, fill = species)) +
geom_bar(alpha = 0.8) +
scale_fill_manual(values = c("darkorange","purple","cyan4"),
guide = "none") +
theme_minimal() +
facet_wrap(~species, ncol = 1) +
coord_flip()
#| label: fig-planes
#| fig-cap: Relationship between wing length and width
#| echo: false
#| warning: false
#| message: false
analysis_data <- read_csv(here::here("data/analysis_data/analysis_data.csv"))
analysis_data |>
ggplot(aes(x = width, y = length)) +
geom_point(alpha = 0.8) +
theme_minimal() +
labs(x = "Wing width (mm)",
y = "Wing length (mm)")
#| echo: false
#| warning: false
#| message: false
marriage_licence_packages <- search_packages("Street Tree Data")
marriage_licence_packages
# Retrieve a list of all resources (datasets) available within the found package
marriage_licence_resources <- marriage_licence_packages %>%
list_package_resources()
# Display the list of resources available in the "Marriage Licence Statistics" package
marriage_licence_resources
marriage_licence_statistics <- marriage_licence_resources[4,] %>%
get_resource()
data=marriage_licence_statistics
#| echo: false
#| warning: false
library(ggplot2)
ggplot(data, aes(x = as.factor(WARD))) +
geom_bar(fill = "lightgreen", color = "black") +
labs(title = "Count of Trees by Ward", x = "Ward", y = "Count of Trees") +
theme_minimal()
#| echo: false
#| eval: true
#| label: tbl-modelresults
#| tbl-cap: "Explanatory models of flight time based on wing width and wing length"
#| warning: false
# Load necessary libraries
library(dplyr)
# Sample 10% of the data (adjust the percentage if needed)
set.seed(123)  # Set seed for reproducibility
sampled_data <- data %>% sample_frac(0.1)
# Check the structure of the sampled data
str(sampled_data)
# Save the sampled data if needed
write.csv(sampled_data, "sampled_data.csv", row.names = FALSE)
# Proceed with the plots using the sampled data
# Enhanced Plot: Distribution of Tree Diameters
ggplot(sampled_data, aes(x = DBH_TRUNK)) +
geom_histogram(binwidth = 5, aes(fill = ..count..), color = "white", alpha = 0.9) +
scale_fill_gradient(low = "#FFDBDB", high = "#FF6B6B") +  # Soft red gradient
labs(title = "Distribution of Tree Diameters",
x = "Tree Diameter (DBH_TRUNK)",
y = "Tree Count") +
theme_minimal(base_size = 15) +
theme(plot.title = element_text(hjust = 0.5, face = "bold"),
axis.title.x = element_text(size = 13, face = "bold"),
axis.title.y = element_text(size = 13, face = "bold"),
panel.grid.minor = element_blank())
#| echo: false
#| warning: false
# Filter top 10 species
top_species <- sampled_data %>%
count(BOTANICAL_NAME, sort = TRUE) %>%
top_n(10, n) %>%
pull(BOTANICAL_NAME)
# Filter the sampled data for top 10 species
filtered_data <- sampled_data %>%
filter(BOTANICAL_NAME %in% top_species)
# Enhanced Plot: Top 10 Tree Species
ggplot(filtered_data, aes(x = reorder(BOTANICAL_NAME, BOTANICAL_NAME, function(x) -length(x)), fill = BOTANICAL_NAME)) +
geom_bar(color = "white", alpha = 0.9) +
scale_fill_viridis_d(option = "C") +  # Viridis palette for colorblind-friendly shades
coord_flip() +
labs(title = "Top 10 Tree Species (Botanical Name)",
x = "Botanical Name",
y = "Tree Count") +
theme_minimal(base_size = 15) +
theme(plot.title = element_text(hjust = 0.5, face = "bold"),
axis.title.x = element_text(size = 13, face = "bold"),
axis.title.y = element_text(size = 13, face = "bold"),
legend.position = "none")
#| echo: false
#| eval: true
#| label: tbl-modelresults
#| tbl-cap: "Explanatory models of flight time based on wing width and wing length"
#| warning: false
# Load necessary libraries
library(ggplot2)
library(dplyr)
# Sample 10% of the data
set.seed(123)
sampled_data <- data %>% sample_frac(0.1)
# Remove outliers using the IQR method
Q1 <- quantile(sampled_data$DBH_TRUNK, 0.25, na.rm = TRUE)
Q3 <- quantile(sampled_data$DBH_TRUNK, 0.75, na.rm = TRUE)
IQR <- Q3 - Q1
# Define the lower and upper bounds for outliers
lower_bound <- Q1 - 1.5 * IQR
upper_bound <- Q3 + 1.5 * IQR
# Filter the data to remove outliers
cleaned_data <- sampled_data %>%
filter(DBH_TRUNK >= lower_bound & DBH_TRUNK <= upper_bound)
# Check the structure of the cleaned data
str(cleaned_data)
# Enhanced Plot: Cleaned Distribution of Tree Diameters
ggplot(cleaned_data, aes(x = DBH_TRUNK)) +
geom_histogram(binwidth = 5, aes(fill = ..count..), color = "white", alpha = 0.9) +
scale_fill_gradient(low = "#FFDBDB", high = "#FF6B6B") +  # Soft red gradient
labs(title = "Cleaned Distribution of Tree Diameters",
x = "Tree Diameter (DBH_TRUNK) (cm)",
y = "Tree Count") +
theme_minimal(base_size = 15) +
theme(plot.title = element_text(hjust = 0.5, face = "bold"),
axis.title.x = element_text(size = 13, face = "bold"),
axis.title.y = element_text(size = 13, face = "bold"),
panel.grid.minor = element_blank())
library(ggplot2)
library(ggthemes)
library(ggplot2)
library(ggthemes)
#| include: false
#| warning: false
#| message: false
library(opendatatoronto)
library(tidyverse)
library(gt)
#| include: false
#| warning: false
#| message: false
library(opendatatoronto)
library(tidyverse)
library(gtable)
#| label: fig-bills
#| fig-cap: Bills of penguins
#| echo: false
summary_table <- data %>%
group_by(WARD) %>%
summarise(Total_Trees = n(),
Mean_Diameter = mean(DBH_TRUNK, na.rm = TRUE),
Tree_Species = n_distinct(BOTANICAL_NAME)) %>%
arrange(desc(Total_Trees))
# Display the summary table using gt
summary_table %>%
gtable() %>%
tab_header(
title = "Summary of Tree Data by Ward",
subtitle = "Total Trees, Mean Diameter, and Tree Species Diversity"
)
#| include: false
#| warning: false
#| message: false
install.packages("gt")
library(opendatatoronto)
library(tidyverse)
library(gt)
#| label: fig-bills
#| fig-cap: Bills of penguins
#| echo: false
summary_table <- data %>%
group_by(WARD) %>%
summarise(Total_Trees = n(),
Mean_Diameter = mean(DBH_TRUNK, na.rm = TRUE),
Tree_Species = n_distinct(BOTANICAL_NAME)) %>%
arrange(desc(Total_Trees))
# Display the summary table using gt
summary_table %>%
gt() %>%
tab_header(
title = "Summary of Tree Data by Ward",
subtitle = "Total Trees, Mean Diameter, and Tree Species Diversity"
)
#| echo: false
#### Loading Libraries ####
library(ggplot2)
library(dplyr)
# Assume 'data' has been pre-loaded
# Filter and Clean Data
sampled_data <- data %>% sample_frac(0.1)
# Remove outliers using the IQR method for DBH
Q1 <- quantile(sampled_data$DBH_TRUNK, 0.25, na.rm = TRUE)
Q3 <- quantile(sampled_data$DBH_TRUNK, 0.75, na.rm = TRUE)
IQR <- Q3 - Q1
lower_bound <- Q1 - 1.5 * IQR
upper_bound <- Q3 + 1.5 * IQR
cleaned_data <- sampled_data %>%
filter(DBH_TRUNK >= lower_bound & DBH_TRUNK <= upper_bound)
# Plot: Tree Species Distribution
ggplot(cleaned_data, aes(x = BOTANICAL_NAME)) +
geom_bar(fill = "skyblue", color = "black") +
theme_minimal() +
labs(title = "Top Tree Species in Toronto", x = "Species", y = "Count") +
coord_flip()
# Plot: Tree Diameter Distribution
ggplot(cleaned_data, aes(x = DBH_TRUNK)) +
geom_histogram(binwidth = 5, fill = "lightcoral", color = "black") +
labs(title = "Distribution of Tree Diameters (DBH)", x = "Diameter (cm)", y = "Count") +
theme_minimal()
# Plot: Tree Density by Ward
ggplot(cleaned_data, aes(x = as.factor(WARD))) +
geom_bar(fill = "steelblue", color = "white") +
labs(title = "Tree Density by Ward", x = "Ward", y = "Tree Count") +
theme_minimal()
# Calculate the top 10 species by count
top_species <- cleaned_data %>%
count(BOTANICAL_NAME, sort = TRUE) %>%
top_n(10, n)
# Filter the dataset to include only the top 10 species
filtered_data <- cleaned_data %>%
filter(BOTANICAL_NAME %in% top_species$BOTANICAL_NAME)
# Plot: Top 10 Tree Species
ggplot(filtered_data, aes(x = reorder(BOTANICAL_NAME, -n), fill = BOTANICAL_NAME)) +
geom_bar(stat = "count", color = "white") +
coord_flip() +
labs(title = "Top 10 Tree Species in Toronto", x = "Tree Species", y = "Count") +
theme_minimal() +
theme(legend.position = "none")
#| echo: false
#### Loading Libraries ####
library(ggplot2)
library(dplyr)
# Assume 'data' has been pre-loaded
# Filter and Clean Data
sampled_data <- data %>% sample_frac(0.1)
# Remove outliers using the IQR method for DBH
Q1 <- quantile(sampled_data$DBH_TRUNK, 0.25, na.rm = TRUE)
Q3 <- quantile(sampled_data$DBH_TRUNK, 0.75, na.rm = TRUE)
IQR <- Q3 - Q1
lower_bound <- Q1 - 1.5 * IQR
upper_bound <- Q3 + 1.5 * IQR
cleaned_data <- sampled_data %>%
filter(DBH_TRUNK >= lower_bound & DBH_TRUNK <= upper_bound)
# Calculate the top 10 species by count
top_species <- cleaned_data %>%
count(BOTANICAL_NAME, sort = TRUE) %>%
top_n(10, n)
# Filter the dataset to include only the top 10 species
filtered_data <- cleaned_data %>%
filter(BOTANICAL_NAME %in% top_species$BOTANICAL_NAME)
# Plot: Top 10 Tree Species
ggplot(filtered_data, aes(x = reorder(BOTANICAL_NAME, -n), fill = BOTANICAL_NAME)) +
geom_bar(stat = "count", color = "white") +
coord_flip() +
labs(title = "Top 10 Tree Species in Toronto", x = "Tree Species", y = "Count") +
theme_minimal() +
theme(legend.position = "none")
# Plot: Tree Diameter Distribution
ggplot(cleaned_data, aes(x = DBH_TRUNK)) +
geom_histogram(binwidth = 5, fill = "lightcoral", color = "black") +
labs(title = "Distribution of Tree Diameters (DBH)", x = "Diameter (cm)", y = "Count") +
theme_minimal()
# Plot: Tree Density by Ward
ggplot(cleaned_data, aes(x = as.factor(WARD))) +
geom_bar(fill = "steelblue", color = "white") +
labs(title = "Tree Density by Ward", x = "Ward", y = "Tree Count") +
theme_minimal()
# Filter and Clean Data
sampled_data <- data %>% sample_frac(0.1)
# Remove outliers using the IQR method for DBH
Q1 <- quantile(sampled_data$DBH_TRUNK, 0.25, na.rm = TRUE)
Q3 <- quantile(sampled_data$DBH_TRUNK, 0.75, na.rm = TRUE)
IQR <- Q3 - Q1
lower_bound <- Q1 - 1.5 * IQR
upper_bound <- Q3 + 1.5 * IQR
cleaned_data <- sampled_data %>%
filter(DBH_TRUNK >= lower_bound & DBH_TRUNK <= upper_bound)
# Filter and Clean Data
sampled_data <- data %>% sample_frac(0.1)
# Remove outliers using the IQR method for DBH
Q1 <- quantile(sampled_data$DBH_TRUNK, 0.25, na.rm = TRUE)
Q3 <- quantile(sampled_data$DBH_TRUNK, 0.75, na.rm = TRUE)
IQR <- Q3 - Q1
lower_bound <- Q1 - 1.5 * IQR
upper_bound <- Q3 + 1.5 * IQR
cleaned_data <- sampled_data %>%
filter(DBH_TRUNK >= lower_bound & DBH_TRUNK <= upper_bound)
# Filter and Clean Data
sampled_data <- data %>% sample_frac(0.1)
# Remove outliers using the IQR method for DBH
Q1 <- quantile(sampled_data$DBH_TRUNK, 0.25, na.rm = TRUE)
Q3 <- quantile(sampled_data$DBH_TRUNK, 0.75, na.rm = TRUE)
IQR <- Q3 - Q1
lower_bound <- Q1 - 1.5 * IQR
upper_bound <- Q3 + 1.5 * IQR
cleaned_data <- sampled_data %>%
filter(DBH_TRUNK >= lower_bound & DBH_TRUNK <= upper_bound)
# Plot: Tree Species Distribution
ggplot(cleaned_data, aes(x = BOTANICAL_NAME)) +
geom_bar(fill = "skyblue", color = "black") +
theme_minimal() +
labs(title = "Top Tree Species in Toronto", x = "Species", y = "Count") +
coord_flip()
#| echo: false
#| warning: false
#| label: fig-outbreaks-by-location-type
#| fig-cap: "Number of outbreaks by type of healthcare location in Toronto in 2023"
#### First Graph ####
# This code is based on knowledge from Alexander (2023).
outbreak_cleaned_data |>
count(`Type of Location`) |>
# The reorder function used for sorting the columns in descending order was obtained
# from Stack Overflow:
# https://stackoverflow.com/questions/25664007/reorder-bars-in-geom-bar-ggplot2-by-value
ggplot(mapping = aes(x = reorder(location_data$`Type of location`, location_data$`Number of outbreaks`), y = location_data$`Number of outbreaks`)) +
geom_col() +
theme_classic() +
labs(x = "Type of location", y = "Number of outbreaks") +
coord_flip() +
# The geom_text function used to add the labels to the graph was obtained from
# R Graphics Cookbook:
# https://r-graphics.org/recipe-bar-graph-labels
# The hjust argument used to align the labels was obtained from
# Cédric Scherer's website:
# https://www.cedricscherer.com/2021/07/05/a-quick-how-to-on-labelling-bar-graphs-in-ggplot2/
geom_text(aes(label = location_data$`Label`), hjust = c(1, 0, 0, 0, 0, 0), colour = "magenta")
top_species <- cleaned_data %>%
count(BOTANICAL_NAME, sort = TRUE) %>%
top_n(10, n) %>%
pull(BOTANICAL_NAME)
# Filter the sampled data for top 10 species
filtered_data <- cleaned_data %>%
filter(BOTANICAL_NAME %in% top_species)
# Enhanced Plot: Top 10 Tree Species
ggplot(filtered_data, aes(x = reorder(BOTANICAL_NAME, BOTANICAL_NAME, function(x) -length(x)), fill = BOTANICAL_NAME)) +
geom_bar(color = "white", alpha = 0.9) +
scale_fill_viridis_d(option = "C") +  # Viridis palette for colorblind-friendly shades
coord_flip() +
labs(title = "Top 10 Tree Species (Botanical Name)",
x = "Botanical Name",
y = "Tree Count") +
theme_minimal(base_size = 15) +
theme(plot.title = element_text(hjust = 0.5, face = "bold"),
axis.title.x = element_text(size = 13, face = "bold"),
axis.title.y = element_text(size = 13, face = "bold"),
legend.position = "none")
# Filter and Clean Data
sampled_data <- data %>% sample_frac(0.1)
# Remove outliers using the IQR method for DBH
Q1 <- quantile(sampled_data$DBH_TRUNK, 0.25, na.rm = TRUE)
Q3 <- quantile(sampled_data$DBH_TRUNK, 0.75, na.rm = TRUE)
IQR <- Q3 - Q1
lower_bound <- Q1 - 1.5 * IQR
upper_bound <- Q3 + 1.5 * IQR
cleaned_data <- sampled_data %>%
filter(DBH_TRUNK >= lower_bound & DBH_TRUNK <= upper_bound)
top_species <- cleaned_data %>%
count(BOTANICAL_NAME, sort = TRUE) %>%
top_n(10, n) %>%
pull(BOTANICAL_NAME)
# Filter the sampled data for top 10 species
filtered_data <- cleaned_data %>%
filter(BOTANICAL_NAME %in% top_species)
# Enhanced Plot: Top 10 Tree Species
ggplot(filtered_data, aes(x = reorder(BOTANICAL_NAME, BOTANICAL_NAME, function(x) -length(x)), fill = BOTANICAL_NAME)) +
geom_bar(color = "white", alpha = 0.9) +
scale_fill_viridis_d(option = "C") +  # Viridis palette for colorblind-friendly shades
coord_flip() +
labs(title = "Top 10 Tree Species (Botanical Name)",
x = "Botanical Name",
y = "Tree Count") +
theme_minimal(base_size = 15) +
theme(plot.title = element_text(hjust = 0.5, face = "bold"),
axis.title.x = element_text(size = 13, face = "bold"),
axis.title.y = element_text(size = 13, face = "bold"),
legend.position = "none")
# Plot: Tree Diameter Distribution
ggplot(cleaned_data, aes(x = DBH_TRUNK)) +
geom_histogram(binwidth = 5, fill = "lightcoral", color = "black") +
labs(title = "Distribution of Tree Diameters (DBH)", x = "Diameter (cm)", y = "Count") +
theme_minimal()
# Plot: Tree Density by Ward
ggplot(cleaned_data, aes(x = as.factor(WARD))) +
geom_bar(fill = "steelblue", color = "white") +
labs(title = "Tree Density by Ward", x = "Ward", y = "Tree Count") +
theme_minimal()
#| echo: false
#### Loading Libraries ####
library(ggplot2)
library(dplyr)
library(tidyverse)
# Assume 'data' has been pre-loaded
# Filter and Clean Data
sampled_data <- data %>% sample_frac(0.1)
# Remove outliers using the IQR method for DBH
Q1 <- quantile(sampled_data$DBH_TRUNK, 0.25, na.rm = TRUE)
Q3 <- quantile(sampled_data$DBH_TRUNK, 0.75, na.rm = TRUE)
IQR <- Q3 - Q1
lower_bound <- Q1 - 1.5 * IQR
upper_bound <- Q3 + 1.5 * IQR
cleaned_data <- sampled_data %>%
filter(DBH_TRUNK >= lower_bound & DBH_TRUNK <= upper_bound)
top_species <- cleaned_data %>%
count(BOTANICAL_NAME, sort = TRUE) %>%
top_n(10, n) %>%
pull(BOTANICAL_NAME)
# Filter the sampled data for top 10 species
filtered_data <- cleaned_data %>%
filter(BOTANICAL_NAME %in% top_species)
# Enhanced Plot: Top 10 Tree Species
ggplot(filtered_data, aes(x = reorder(BOTANICAL_NAME, BOTANICAL_NAME, function(x) -length(x)), fill = BOTANICAL_NAME)) +
geom_bar(color = "white", alpha = 0.9) +
scale_fill_viridis_d(option = "C") +  # Viridis palette for colorblind-friendly shades
coord_flip() +
labs(title = "Top 10 Tree Species (Botanical Name)",
x = "Botanical Name",
y = "Tree Count") +
theme_minimal(base_size = 15) +
theme(plot.title = element_text(hjust = 0.5, face = "bold"),
axis.title.x = element_text(size = 13, face = "bold"),
axis.title.y = element_text(size = 13, face = "bold"),
legend.position = "none")
# Plot: Tree Diameter Distribution
ggplot(cleaned_data, aes(x = DBH_TRUNK)) +
geom_histogram(binwidth = 5, fill = "lightcoral", color = "black") +
labs(title = "Distribution of Tree Diameters (DBH)", x = "Diameter (cm)", y = "Count") +
theme_minimal()
# Plot: Tree Density by Ward
ggplot(cleaned_data, aes(x = as.factor(WARD))) +
geom_bar(fill = "steelblue", color = "white") +
labs(title = "Tree Density by Ward", x = "Ward", y = "Tree Count") +
theme_minimal()
# Filter and Clean Data
sampled_data <- data %>% sample_frac(0.1)
# Remove outliers using the IQR method for DBH
Q1 <- quantile(sampled_data$DBH_TRUNK, 0.25, na.rm = TRUE)
Q3 <- quantile(sampled_data$DBH_TRUNK, 0.75, na.rm = TRUE)
IQR <- Q3 - Q1
lower_bound <- Q1 - 1.5 * IQR
upper_bound <- Q3 + 1.5 * IQR
cleaned_data <- sampled_data %>%
filter(DBH_TRUNK >= lower_bound & DBH_TRUNK <= upper_bound)
# Filter and Clean Data
data <- read_csv(here::here("/Users/xuyihang/Desktop/Github local/data"))
# Filter and Clean Data
data <- read_csv(here::here("/Users/xuyihang/Desktop/Github local/data"))
# Filter and Clean Data
data <- read_csv(here::here("/Users/xuyihang/Desktop/Github local/data/data1.csv"))
sampled_data <- data %>% sample_frac(0.1)
# Remove outliers using the IQR method for DBH
Q1 <- quantile(sampled_data$DBH_TRUNK, 0.25, na.rm = TRUE)
Q3 <- quantile(sampled_data$DBH_TRUNK, 0.75, na.rm = TRUE)
IQR <- Q3 - Q1
lower_bound <- Q1 - 1.5 * IQR
upper_bound <- Q3 + 1.5 * IQR
cleaned_data <- sampled_data %>%
filter(DBH_TRUNK >= lower_bound & DBH_TRUNK <= upper_bound)
#| echo: false
#### Loading Libraries ####
install.packages("scrartcl.cls")
library(ggplot2)
library(dplyr)
library(tidyverse)
# Assume 'data' has been pre-loaded
#| echo: false
#### Loading Libraries ####
install.packages("scrartcl.cls")
library(ggplot2)
library(dplyr)
library(tidyverse)
# Assume 'data' has been pre-loaded
